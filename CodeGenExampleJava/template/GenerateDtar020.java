
import java.io.IOException;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.cg.CodeGenInterface;
import net.sf.JRecord.cg.details.codes.CobolDialects;
import net.sf.JRecord.cg.details.codes.CopybookSplit;
import net.sf.JRecord.cg.details.codes.FileOrganisation;
import net.sf.JRecord.cg.details.codes.StandardTemplates;
import net.sf.JRecord.def.IO.builders.recordDeciders.ISingleFieldDecider;

 /**
   *  Purpose: Run JRecord-CodeGen to generate java code
   *           to read write files for Cobol Copybook: DTAR020    
   *
   *  This code is generated by CodeGen. There are three main reasons to   
   *  generate this class:
   *  1) When generating code from the RecordEditor/ReCsvEditor, it allows
   *     the interface to be regenerated using Just the CodeGen package
   *  2) Using batch interface (bat / shell script) this class will be
   *     generated the new Java interface in the future.
   *  3) When using the File analysis option to derive attributes, this
   *     generated class will hard code the attributes for future use with out 
   *     the file.
   */
public class GenerateDtar020 {

	public static void main(String[] args) throws IOException, XMLStreamException, FactoryConfigurationError {

		CodeGenInterface.TEMPLATES.newTempateBuilder("DTAR020.cbl")
			.setCobolDialect(CobolDialects.MAINFRAME)
			.setFileOrganisation(FileOrganisation.FIXED_LENGTH)
			.setCopybookSplitOption(CopybookSplit.SPLIT_NONE)
			.setFont("cp037")
			.setTemplate(StandardTemplates.STANDARD)
			.setPackageName("dtar020.standard")
			.setOutputDirectory("generatedCode2/dtar020")
			.generateJava();
	}
}
