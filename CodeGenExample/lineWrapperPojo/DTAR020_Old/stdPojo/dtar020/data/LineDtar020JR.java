package stdPojo.dtar020.data;

 /*
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 9 Aug 2017   :  :   
  * *     from Copybook: DTAR020.cbl
  * *          Template: stdPojo
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This Code should not be changed you should, either:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        9 Aug 2017  Initial version
  *     (Bruce Martin)
  */

import java.math.BigDecimal;

import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.Details.IGetByteData;
import net.sf.JRecord.Details.Line;
import net.sf.JRecord.Details.CsvLine;
import net.sf.JRecord.cgen.def.IAsPojo;
	
import stdPojo.dtar020.def.IDtar020;
import stdPojo.dtar020.def.IDtar020Pojo;  

public class LineDtar020JR 
implements IDtar020Pojo, IGetByteData, IAsPojo<LineDtar020Pojo> {
    
    private AbstractLine line; 

    private static FieldNamesDtar020.RecordDtar020 fn
                   = FieldNamesDtar020.RECORD_DTAR020;

        

    @Override
    public String getKeycodeNo() {
        return line.getFieldValue(fn.keycodeNo).asString();
    }
    
    @Override
    public void setKeycodeNo(String value) {
        this.line.getFieldValue(fn.keycodeNo).set(value);
    }

    @Override
    public short getStoreNo() {
        return (short) line.getFieldValue(fn.storeNo).asInt();                                 
    }
    
    @Override
    public void setStoreNo(short value) {
        this.line.getFieldValue(fn.storeNo).set(value);
    }

    @Override
    public int getDate() {
        return line.getFieldValue(fn.date).asInt();
    }
    
    @Override
    public void setDate(int value) {
        this.line.getFieldValue(fn.date).set(value);
    }

    @Override
    public short getDeptNo() {
        return (short) line.getFieldValue(fn.deptNo).asInt();                                 
    }
    
    @Override
    public void setDeptNo(short value) {
        this.line.getFieldValue(fn.deptNo).set(value);
    }

    @Override
    public int getQtySold() {
        return line.getFieldValue(fn.qtySold).asInt();
    }
    
    @Override
    public void setQtySold(int value) {
        this.line.getFieldValue(fn.qtySold).set(value);
    }

    @Override
    public BigDecimal getSalePrice() {
        return line.getFieldValue(fn.salePrice).asBigDecimal();
    }
    
    @Override
    public void setSalePrice(BigDecimal value) {
        this.line.getFieldValue(fn.salePrice).set(value);
    }


	


    @Override
    public byte[] getData() {
        return line.getData();  
    }

    @Override
    public void setData(byte[] data) {

        if (line instanceof Line || line instanceof CsvLine) {
            line.setData(data);
        } else {
            throw new RuntimeException("Invalid line for setdata");
        }
    }
    
    public LineDtar020JR setLine(AbstractLine l) {
    	line = l;
    	return this;
    }
    
    public AbstractLine getLine() {
        return line;
    }
    
    public LineDtar020Pojo asPojo() {
        LineDtar020Pojo l = new LineDtar020Pojo();
        l.set(this);
        return l;
    }
    
    public void set(IDtar020 value) {
        CodeDtar020
            .assignDtar020(
                this, value);
    }
}

