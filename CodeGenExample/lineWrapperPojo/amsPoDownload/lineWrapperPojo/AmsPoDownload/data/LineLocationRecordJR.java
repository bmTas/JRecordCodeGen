package lineWrapperPojo.AmsPoDownload.data;

 /*
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 6 Nov 2018 8:28:53 
  * *     from Copybook: amsPoDownload.cbl
  * *          Template: lineWrapperPojo
  * *             Split: 01   
  * * File Organization: Text   
  * *              Font: 
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This Code should not be changed you should, either:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        6 Nov 2018  Initial version
  *     (Bruce Martin)
  */

/**
 *  This is a <i>LineWrapper</i> class - it wraps JRecord Line
 *  makes it look like a Java Bean and implements the relavent
 *  interfaces
 */
 


import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.Details.IGetByteData;
import net.sf.JRecord.Details.Line;
import net.sf.JRecord.Details.CsvLine;

import net.sf.JRecord.cgen.defJr.IAsPojo;
	
import lineWrapperPojo.AmsPoDownload.def.ILocationRecord;
import lineWrapperPojo.AmsPoDownload.def.ILocationRecordPojo;  


public class LineLocationRecordJR 
implements ILocationRecordPojo, IGetByteData, IAsPojo<LineLocationRecordPojo> {
   
    private AbstractLine line; 

    private static FieldNamesAmspodownload.RecordLocationRecord fn
                   = FieldNamesAmspodownload.RECORD_LOCATION_RECORD;

    private int[] sizeDcNumber = {10};
        

    @Override
    public String getRecordType() {
        return line.getFieldValue(fn.recordType).asString();
    }
    
    @Override
    public void setRecordType(String value) {
        this.line.getFieldValue(fn.recordType).set(value);
    }


    @Override
    public short  getDcNumber(int idx1) {
        return (short) (line.getFieldValue(fn.dcNumber.get(idx1))).asInt();
    }
    
    
    @Override
    public void setDcNumber(int idx1, short value) {
        (line.getFieldValue(fn.dcNumber.get(idx1))).set(value);
    }

    @Override
    public int  getPackQuantity(int idx1) {
        return (line.getFieldValue(fn.packQuantity.get(idx1))).asInt();
    }
    
    
    @Override
    public void setPackQuantity(int idx1, int value) {
        (line.getFieldValue(fn.packQuantity.get(idx1))).set(value);
    }

	
    public int  getDcNumberArrayLength(int indexNumber) {
        return sizeDcNumber[indexNumber];
    }


    @Override
    public byte[] getData() {
        return line.getData();  
    }

    @Override
    public void setData(byte[] data) {

        if (line instanceof Line || line instanceof CsvLine) {
            line.setData(data);
        } else {
            throw new RuntimeException("Invalid line for setdata");
        }
    }
    
    public LineLocationRecordJR setLine(AbstractLine l) {
    	line = l;
    	return this;
    }
    
    public AbstractLine getLine() {
        return line;
    }
    
    public LineLocationRecordPojo asPojo() {
        LineLocationRecordPojo l = new LineLocationRecordPojo();
        l.set(this);
        return l;
    }
    
    public void set(ILocationRecord value) {
        CodeAmspodownload
            .assignLocationRecord(
                this, value);
    }
}

