package example.ioBuilder.dtar020.io;
 /*
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 6 Nov 2018 12:47:9 
  * *     from Copybook: DTAR020.cbl
  * *          Template: javaPojo
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This Code should not be changed you should, either:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        6 Nov 2018  Initial version
  *     (Bruce Martin)
  */

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.External.CopybookLoader;
import net.sf.JRecord.cgen.def.IDeserializer;
import net.sf.JRecord.cgen.def.IReader;
import net.sf.JRecord.cgen.def.IWriter;
import net.sf.JRecord.cgen.impl.LineDeserializer;
import net.sf.JRecord.cgen.impl.LineSerializer;
import net.sf.JRecord.cgen.impl.ReadFromBytes;
import net.sf.JRecord.cgen.impl.WriteAsBytes;

import net.sf.JRecord.def.IO.builders.IIOBuilder;
import example.ioBuilder.dtar020.data.LineDtar020JR;
import example.ioBuilder.dtar020.data.LineDtar020Pojo;
import example.ioBuilder.dtar020.def.IDtar020;

import example.ioBuilder.dtar020.schema.SchemaDtar020;

public class IOBuilderDtar020 {

    private IIOBuilder bldr;
    private final SchemaDtar020 schemaDtar020;

    public IOBuilderDtar020(String copybookFileName) throws IOException {
        bldr = JRecordInterface1.COBOL.newIOBuilder(copybookFileName)
                    .setSplitCopybook(CopybookLoader.SPLIT_NONE)
                    .setFileOrganization(Constants.IO_FIXED_LENGTH)
                    .setDropCopybookNameFromFields(true)
                    .setFont("cp037");

        schemaDtar020 = new SchemaDtar020(bldr.getLayout());
    }
         
    public IOBuilderDtar020(InputStream copybook, String copybookName) throws IOException {
        bldr = JRecordInterface1.COBOL.newIOBuilder(copybook, copybookName)
                    .setSplitCopybook(CopybookLoader.SPLIT_NONE)
                    .setFileOrganization(Constants.IO_FIXED_LENGTH)
                    .setDropCopybookNameFromFields(true)
                    .setFont("cp037");

        schemaDtar020 = new SchemaDtar020(bldr.getLayout());
    }

    /**
     * Create
     */
    public IOBuilderDtar020() {
        schemaDtar020 = new SchemaDtar020();
    }
    
    
    public IReader<LineDtar020JR> newReader(String fileName) throws IOException {
        return newReader(new FileInputStream(fileName));
    }

    private final IDeserializer<LineDtar020JR> deserializerDtar020JR = new IDeserializer<LineDtar020JR>() {  
        @Override public LineDtar020JR deserialize(byte[] data) {
            LineDtar020JR l = new LineDtar020JR(schemaDtar020.recordDtar020);
            l.setData(data);
            return l;                                   
        }
    };    

    public IReader<LineDtar020JR> newReader(InputStream in) throws IOException {
        return new ReadFromBytes<LineDtar020JR>(
                                schemaDtar020.schema,
                                deserializerDtar020JR) 
                        .open(in);
    }


    public IReader<LineDtar020Pojo> newPojoReader(String fileName) throws IOException {
        return newPojoReader(new FileInputStream(fileName));
    }

    public IReader<LineDtar020Pojo> newPojoReader(InputStream in) throws IOException {
        return new ReadFromBytes<LineDtar020Pojo>(
                                schemaDtar020.schema,
                                LineDeserializer.create(newDtar020JrLine()))
                        .open(in);
    }

    public IWriter<IDtar020> newWriter(String fileName) throws IOException {
        return newWriter(new FileOutputStream(fileName));
    }
    
    public IWriter<IDtar020> newWriter(OutputStream out) throws IOException {
        return 
              new WriteAsBytes<IDtar020>(
                                schemaDtar020.schema,
                                LineSerializer.create(newDtar020JrLine())
                             )
                        .open(out);
    }
 
	
    public LineDtar020JR newDtar020JrLine() {
    	return new LineDtar020JR(schemaDtar020.recordDtar020);
    }
    
    
    public LineDtar020Pojo newDtar020PojoLine() {
    	return new LineDtar020Pojo();
    }

}

