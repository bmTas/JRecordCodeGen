package lineWrapper.dtar027.data;

 /*
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 5 Nov 2018 8:40:33 
  * *     from Copybook: DTAR027.cbl
  * *          Template: lineWrapper
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This Code should not be changed you should, either:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        5 Nov 2018  Initial version
  *     (Bruce Martin)
  */

/**
 *  This is a <i>LineWrapper</i> class - it wraps JRecord Line
 *  makes it look like a Java Bean and implements the relavent
 *  interfaces
 */
 

import java.math.BigDecimal;

import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.Details.IGetByteData;
import net.sf.JRecord.Details.Line;
import net.sf.JRecord.Details.CsvLine;


public class LineDtar027JR implements IGetByteData {
   
    private AbstractLine line; 

    private static FieldNamesDtar027.RecordDtar027 fn
                   = FieldNamesDtar027.RECORD_DTAR027;

        

    
    public String getKeycodeNo() {
        return line.getFieldValue(fn.keycodeNo).asString();
    }
    
    
    public void setKeycodeNo(String value) {
        this.line.getFieldValue(fn.keycodeNo).set(value);
    }

    
    public int getQtySold() {
        return line.getFieldValue(fn.qtySold).asInt();
    }
    
    
    public void setQtySold(int value) {
        this.line.getFieldValue(fn.qtySold).set(value);
    }

    
    public BigDecimal getSalePrice() {
        return line.getFieldValue(fn.salePrice).asBigDecimal();
    }
    
    
    public void setSalePrice(BigDecimal value) {
        this.line.getFieldValue(fn.salePrice).set(value);
    }


	


    @Override
    public byte[] getData() {
        return line.getData();  
    }

    @Override
    public void setData(byte[] data) {

        if (line instanceof Line || line instanceof CsvLine) {
            line.setData(data);
        } else {
            throw new RuntimeException("Invalid line for setdata");
        }
    }
    
    public LineDtar027JR setLine(AbstractLine l) {
    	line = l;
    	return this;
    }
    
    public AbstractLine getLine() {
        return line;
    }
}

