package ${generateOptions.packageId}.data;
#incl("schema/CommentSchema.pvm")
#incl("schema/ArrayLength.vm")
#macro(arrayIdx $max)
#if( $max > 0)#foreach ($i in [1 .. ${max}])[idx${i}]#end #end
#end
	

#*  *##if (${currentRecord.getArrayDetailsList().size()} > 0)
import java.util.Arrays;
#*  *##end
#foreach($jc in ${currentRecord.getClassImports()})
import ${jc};
#end	
#*  *##foreach($imp in ${currentRecord.getImportList()})
import ${imp};
#*  *##end

#*  *##set ( $interfaceTxt = "")
#*  *##set ( $overide = "")
#*  *##set ( $overideSet = "")
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataPojo.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName};
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName}Pojo;


#*      *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}Pojo")
#*      *##set ( $overide = "@Override")
#*      *##set ( $overideSet = "@Override")
#*  *##elseif (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IData.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName};
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataUpdate.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName}Upd;
#*          *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}, I${currentRecord.extensionName}Upd")
#*          *##set ( $overideSet = "@Override")
#*      *##else	
#*         *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}")
#*      *##end	
#*      *##set ( $overide = "@Override")
#*  *##end
#*  *##set ( $extends = "" )
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})
#*      *##set ( $extends = "extends Line${generateOptions.schemaDefinition.extensionName}Schema " )
#*  *##end	

/**
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})	
 * This class represents one Cobol Record type <b>${currentRecord.cobolName}</b>
 * from COBOL copybook ${generateOptions.schemaDefinition.cobolName}
#*  *##else	
 * This class represents the Cobol Record ( <b>${currentRecord.cobolName}</b>)
 * from the file (copybook  ${generateOptions.schemaDefinition.cobolName}).
#*  *##end	
 */
public class Line${currentRecord.extensionName}Pojo ${extends}
${interfaceTxt} {

#defineArrayLengthConstants()
###*  *##foreach($a in ${currentRecord.getArraySameSize()}) 
##    private static final int[] LENGTH_${a.get(0).getFirstElement().getConstantName()} = {${a.get(0).getSizesAsString()}};
###*  *##end	     
	
#*  *##foreach($f in ${currentRecord.getFields()}) 
#*      *##if (! ${f.isArrayItem()})	
    private ${f.getJavaType()} ${f.javaName};
#*      *##end
#*  *##end

#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    private ${a.getFirstFieldDef().getJavaType()}#*
        *##foreach ($ii in [1 .. ${a.getSizes().size()}])[]#end#*
             *# ${a.getFirstElement().javaName};        
#*  *##end


#*  *##if (${currentRecord.getArrayDetailsList().size()} > 0 || ${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})

	/**
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})	
     * This class represents one Cobol Record type <b>${currentRecord.cobolName}</b> from the file
#*       *##else	
     * This class represents one Cobol Record from the file
#*       *##end	
	 * for COBOL copybook ${generateOptions.schemaDefinition.cobolName}
     */
    public Line${currentRecord.extensionName}Pojo() {
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})
#*          *##set ( $extends = "extends Line${generateOptions.schemaDefinition.extensionName}Schema " )
        super( ${generateOptions.packageId}.definitions.Defs${generateOptions.schemaDefinition.extensionName}
                      .Records.${currentRecord.constantName} );
                      
#*      *##end	
	
#*      *##if (${currentRecord.getArrayDetailsList().size()} > 0)
#*          *##foreach($aa in ${currentRecord.getArraySameSize()})
#*              *##set( $st = "")
#*              *##foreach($a in $aa)
#*                   *##set( $size = "LENGTH_${aa.get(0).getFirstElement().getConstantName()}[0]")
        ${st}${a.getFirstElement().javaName} #arrayIdx(0) = new ${a.getFirstFieldDef().getJavaType()}#foreach ($i in [1 ..${a.getSizes().size()}])[${size}]#set( $size ="")#end ;       	
#*              *##end#*

#*              *##set( $last = ${aa.get(0).getSizes().size()} - 1)
#*              *##if( $last > 0)
#*                  *##foreach ($ii in [1 .. ${last}])
#*                      *##set( $iim1 = $ii - 1)

        ${st}for (int idx${ii} = 0;idx${ii} < LENGTH_${aa.get(0).getFirstElement().getConstantName()}[${iim1}]; idx${ii}++) {
###*                      *##foreach($a in $aa)
###*                          *##set( $size = "LENGTH_${aa.get(0).getFirstElement().getConstantName()}[${iim1}]")
###*                          *##set( $endFor = ${a.getSizes().size()} - 1)
##        ${st}    ${a.getFirstElement().javaName} #arrayIdx(${ii}) = new ${a.getFirstFieldDef().getJavaType()}#foreach ($i in [$ii ..${endFor}])[${size}]#set($size = "")#end ;       	
###*                      *##end#*
#*                        *##set( $st = "${st}    ")
#*                  *##end
#*              *##end
#*              *##foreach($a in ${aa})
        ${st}${a.getFirstElement().javaName} #arrayIdx(${last}) = new ${a.getFirstFieldDef().getJavaType()}[LENGTH_${aa.get(0).getFirstElement().getConstantName()}[${last}]];       	
#*              *##end
#*              *##foreach($a in ${aa})
#*                  *##if (${a.getFirstFieldDef().getJavaType()} == "short")
        ${st}Arrays.fill(${a.getFirstElement().javaName} #arrayIdx(${last}), (short) ${a.getFirstFieldDef().getFieldInitialise()});      	
#*                 *##else
        ${st}Arrays.fill(${a.getFirstElement().javaName} #arrayIdx(${last}), ${a.getFirstFieldDef().getFieldInitialise()});      	
#*                 *##end
#*              *##end
#*              *##if( $last > 0)
        #foreach($ii in [1 .. ${last}])}#end
#*              *##end

#*          *##end
#*      *##end
    }
#*  *##end

#*  *##foreach($f in ${currentRecord.getFields()}) 
#*      *##if (! ${f.isArrayItem()})
	/**
	 *  Get Cobol Field ${f.cobolName} (Position/Length ${f.getPos()}/${f.getLen()})
	 */
    ${overide}
    public ${f.getJavaType()} get${f.extensionName}() {
        return ${f.javaName};
    }
    
	/**
	 *  Set Cobol Field ${f.cobolName} (Position/Length ${f.getPos()}/${f.getLen()}
	 */
    ${overideSet}
    public void set${f.extensionName}(${f.getJavaType()} value) {
        this.${f.javaName} = value;
    }

#*      *##end
#*  *##end

#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    ${overide}
	/**
	 *  Get Cobol Array Field ${a.getFirstElement().cobolName} Array Sizes: ${a.getSizesAsString()}
	 */
    public ${a.getFirstFieldDef().getJavaType()}  get${a.getFirstElement().extensionName}(${a.getIndexParameters()}) {
        return ${a.getFirstElement().javaName}${a.getArrayAccessParameters()};
    }
  
	/**
	 *  Set Cobol Array Field ${a.getFirstElement().cobolName} Array Sizes: ${a.getSizesAsString()}
	 */
    ${overideSet}
    public void set${a.getFirstElement().extensionName}(${a.getIndexParameters()}, ${a.getFirstFieldDef().getJavaType()} value) {
        ${a.getFirstElement().javaName}${a.getArrayAccessParameters()} = value;
    }

#*  *##end

#defineArrayLengthMethods()	                      
###*  *##foreach($a in ${currentRecord.getArraySameSize()}) 
##	
###*      *##if (${a.get(0).isThereaDependOnArrayField()})	
##	/**
##	 * Get the Array Sizes.
##	 * The following index's are Cobol Occurs depending (variable sized arrays)<ul>
###*          *##foreach ($od in ${a.get(0).getDependingOnList()})
###*              *##if (${od.isDependingOnFieldAnArrayField()})	
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().getArrayDefinition().firstElement.javaName}
###*              *##else
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().javaName}
###*              *##end
###*          *##end
##	 * </ul>
##	 */
##    public int  get${a.get(0).getFirstElement().extensionName}ArrayLength(int... index) {
###*          *##foreach ($od in ${a.get(0).getDependingOnList()})
##	    if (index.length == ${od.getArrayIndexNumber()}) {
###*              *##if (${od.isDependingOnFieldAnArrayField()})	
###*                  *##set ($sep = "")             
###*                  *##set ($last =  ${od.getDependingOnField().getArrayIndexDetails().getIndexCount()} - 1)     
##	       return get${od.getDependingOnField().getArrayDefinition().firstElement.extensionName}(#*
##          *##foreach ($ii in [0 .. ${last}])${sep}index[${ii}]#set ($sep = ", ")#end);
###*              *##else
##	       return get${od.getDependingOnField().extensionName}();
###*              *##end
##	    }
##	    
###*          *##end
##        return LENGTH_${a.get(0).getFirstElement().getConstantName()}[index.length];
##    }
##    
##    	/**
##	 * Set the Array Sizes for variable sized arrays (occurs depending). Only 
##	 * the following index's are affected (Cobol Occurs depending (variable sized arrays))<ul>
###*          *##foreach ($od in ${a.get(0).getDependingOnList()})
###*              *##if (${od.isDependingOnFieldAnArrayField()})	
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().getArrayDefinition().firstElement.javaName}
###*              *##else
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().javaName}
###*              *##end
###*          *##end
##	 * </ul>
##	 * @param indexSize the indexs and array size is the last parameter
##	 */
##    public void set${a.get(0).getFirstElement().extensionName}ArrayLength(int... indexSize) {
###*          *##foreach ($od in ${a.get(0).getDependingOnList()})
##	    if (indexSize.length - 1 == ${od.getArrayIndexNumber()}) {
###*              *##if (${od.isDependingOnFieldAnArrayField()})	
###*                  *##set ($last =  ${od.getDependingOnField().getArrayIndexDetails().getIndexCount()} - 1)     
###*                  *##set ($val =  ${od.getDependingOnField().getArrayIndexDetails().getIndexCount()})     
#####*                  *###set ($val =  indexSize[${od.getDependingOnField().getArrayIndexDetails().getIndexCount()}]")     
#####*                  *##set ($v =  ${od.getDependingOnField().formatSet("${val}")})     
##	       set${od.getDependingOnField().getArrayDefinition().firstElement.extensionName}(#*
##          *##foreach ($ii in [0 .. ${last}])indexSize[${ii}], #end ${od.getDependingOnField().getFieldFormat()} indexSize[${val}]);
###*              *##else
##	       set${od.getDependingOnField().extensionName}(${od.getDependingOnField().formatSet("indexSize[indexSize.length - 1]")});
###*              *##end
##	    }
###*          *##end
##    }
##
###*      *##else
##	/**
##	 * Get the Array Sizes.
##	 * @param indexNumber index of the array you want to get the size of
###*          *##if (${a.get(0).isOccursDependingOn()})
##	 * The following index's are Cobol Occurs depending (variable sized arrays)<ul>
###*              *##foreach ($od in ${a.get(0).getDependingOnList()})
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().javaName}
###*              *##end
##	 * </ul>
###*          *##end
##	 */
##    public int  get${a.get(0).getFirstElement().extensionName}ArrayLength(int indexNumber) {
###*          *##if (${a.get(0).isOccursDependingOn()})
###*              *##foreach ($od in ${a.get(0).getDependingOnList()})
##	    if (indexNumber == ${od.getArrayIndexNumber()}) {
##	       return get${od.getDependingOnField().extensionName}();
##	    }
##	    
###*              *##end
###*          *##end
##        return LENGTH_${a.get(0).getFirstElement().getConstantName()}[indexNumber];
##    }
###*          *##if (${a.get(0).isOccursDependingOn()})
##	
##	/**
##	 * Set the Occurs-Depending (Cobol Variable sized arrays) Array Sizes.
##	 * Only the following index's are affected 
##	 * (Cobol Occurs depending (variable sized arrays))<ul>
##	 * @param indexNumber index of the array you want to get the size of
##	 * The following index's are Cobol Occurs depending (variable sized arrays)<ul>
###*              *##foreach ($od in ${a.get(0).getDependingOnList()})
##	 *   <li>index=${od.getArrayIndexNumber()},  field=${od.getDependingOnField().javaName}
###*              *##end
##	 * </ul>
##	 */
##    public void  set${a.get(0).getFirstElement().extensionName}ArrayLength(int indexNumber, int arraySize) {
###*              *##foreach ($od in ${a.get(0).getDependingOnList()})
##	    
##	    if (indexNumber == ${od.getArrayIndexNumber()}) {
##	       set${od.getDependingOnField().extensionName}(${od.getDependingOnField().formatSet("arraySize")});
##	    }
###*              *##end
##    }
###*          *##end
###*      *##end
##    
###*  *##end
##	
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/Code.vm")})
	
    public void set(I${currentRecord.extensionName} value) {
        Code${generateOptions.schemaDefinition.extensionName}
            .assign${currentRecord.extensionName}(
                this, value);
    }
#*  *##else
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataPojo.vm")})	
    public void set(I${currentRecord.extensionName} pojo) {
#*         *##foreach($f in ${currentRecord.getFields()}) 
#*             *##if (! ${f.isArrayItem()})
       ${f.javaName} = pojo.get${f.extensionName}();
#*             *##end   
#*         *##end    
    
#*         *##foreach($as in ${currentRecord.getArraySameSize()}) 
#*             *##set($n = "from.get${as.get(0).getFirstElement().extensionName}ArrayLength")
##${as.get(0).getForLoops("pojo")}
${as.get(0).getForLoops("pojo.get${as.get(0).getFirstElement().extensionName}ArrayLength")}    
##${as.get(0).getForLoops("pojo.get${as.get(0).getFirstElement().extensionName}ArrayLength")}    
#*             *##foreach($a in ${as}) 
           ${a.getFirstElement().javaName}${a.getArrayAccessParameters()} = pojo.get${a.getFirstElement().extensionName}(${a.getCallIndexParameters()});
#*             *##end
${as.get(0).getEndForLoops()}    
#*         *##end    
    }
#*     *##end     
#*  *##end	
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})	
	
	public Line${currentRecord.extensionName}Pojo as${currentRecord.extensionName}() {
	    return this;
	}
#*  *##end	

}
